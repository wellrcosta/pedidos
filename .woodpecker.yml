# .woodpecker.yml — Docker Hub + SHA + bump automático (com guard-clauses)

steps:
  install_and_test:
    name: Install & Test
    image: node:20
    commands:
      - npm ci
      - npm run test -- --coverage
    when:
      branch: [main]
      event: [push, manual]

  upload_coverage_codecov:
    name: Upload Coverage to Codecov
    image: alpine:latest
    environment:
      CODECOV_TOKEN:
        from_secret: CODECOV_TOKEN
    commands:
      - apk add --no-cache curl bash
      - curl -Os https://uploader.codecov.io/latest/linux/codecov
      - chmod +x codecov
      - ./codecov --token "$CODECOV_TOKEN" --fail-under=60 --file=coverage/lcov.info
    when:
      branch: [main]
      event: [push, manual]

  docker_build_push:
    name: Docker Build & Push (Docker Hub)
    image: docker:24.0.7-cli
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      DOCKER_USER:
        from_secret: DOCKER_USER
      DOCKER_TOKEN:
        from_secret: DOCKER_TOKEN
    commands:
      - set -eu
      - echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USER" --password-stdin
      - docker build -t "wellrcosta/${CI_REPO_NAME}:latest" -t "wellrcosta/${CI_REPO_NAME}:${CI_COMMIT_SHA}" .
      - docker push "wellrcosta/${CI_REPO_NAME}:latest"
      - docker push "wellrcosta/${CI_REPO_NAME}:${CI_COMMIT_SHA}"
      - echo "${CI_COMMIT_SHA}" > .tag_sha
      - docker rmi "wellrcosta/${CI_REPO_NAME}:latest" || true
      - docker rmi "wellrcosta/${CI_REPO_NAME}:${CI_COMMIT_SHA}" || true
    when:
      branch: [main]
      event: [push, manual]

  bump_tag_commit:
    name: Bump tag in deploy.values.yaml
    image: alpine:3.20
    environment:
      GITHUB_TOKEN:
        from_secret: GITHUB_TOKEN # PAT com escopo "repo"
    commands:
      - set -eu
      - apk add --no-cache git yq

      # Debug: mostrar variáveis disponíveis
      - echo "=== DEBUG INFO ==="
      - echo "CI_REPO_OWNER=${CI_REPO_OWNER:-UNDEFINED}"
      - echo "CI_REPO_NAME=${CI_REPO_NAME:-UNDEFINED}"
      - echo "CI_COMMIT_SHA=${CI_COMMIT_SHA:-UNDEFINED}"
      - echo "CI_REPO=${CI_REPO:-UNDEFINED}"
      - echo "=================="

      # 1) Verificar se variáveis essenciais existem
      - |
        if [ -z "${CI_REPO_OWNER:-}" ] || [ -z "${CI_REPO_NAME:-}" ]; then
          echo "ERRO: Variáveis CI_REPO_OWNER ou CI_REPO_NAME não definidas" >&2
          echo "Tentando usar CI_REPO como fallback..."
          if [ -n "${CI_REPO:-}" ]; then
            # CI_REPO geralmente está no formato "owner/repo"
            export CI_REPO_OWNER=$(echo "$CI_REPO" | cut -d'/' -f1)
            export CI_REPO_NAME=$(echo "$CI_REPO" | cut -d'/' -f2)
            echo "Extraído: OWNER=$CI_REPO_OWNER, NAME=$CI_REPO_NAME"
          else
            echo "Nenhuma variável de repositório disponível" >&2
            exit 1
          fi
        fi

      # 2) Configurar git
      - git config --global user.email "ci@wellrcosta.dev"
      - git config --global user.name "woodpecker-bot"
      - git config --global --add safe.directory /woodpecker/src

      # 3) Determinar SHA a usar
      - |
        if [ -f .tag_sha ]; then
          SHA="$(cat .tag_sha)"
          echo "Usando SHA do arquivo .tag_sha: ${SHA}"
        else
          SHA="${CI_COMMIT_SHA}"
          echo "Usando SHA do commit atual: ${SHA}"
        fi

        if [ -z "${SHA}" ]; then
          echo "ERRO: Não foi possível determinar o SHA" >&2
          exit 1
        fi

        # Exportar para usar nos próximos comandos
        export SHA

      # 4) Verificar se deploy.values.yaml existe
      - |
        if [ ! -f deploy.values.yaml ]; then
          echo "ERRO: deploy.values.yaml não encontrado na raiz do repositório" >&2
          ls -la . # mostrar conteúdo para debug
          exit 1
        fi

      # 5) Mostrar conteúdo atual antes da alteração
      - echo "=== CONTEÚDO ATUAL ==="
      - cat deploy.values.yaml
      - echo "===================="

      # 6) Atualizar arquivo e verificar mudanças
      - |
        echo "Atualizando tag para: ${SHA}"
        yq -i '.tag = strenv(SHA)' deploy.values.yaml

        # Mostrar o que mudou
        echo "=== APÓS ALTERAÇÃO ==="
        cat deploy.values.yaml
        echo "==================="

        # Verificar se houve mudanças
        if git diff --quiet deploy.values.yaml; then
          echo "Nenhuma mudança detectada no deploy.values.yaml"
          exit 0
        fi

        git add deploy.values.yaml
        git commit -m "chore(ci): update image tag to ${SHA}"

      # 7) Configurar remote e fazer push
      - git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${CI_REPO_OWNER}/${CI_REPO_NAME}.git"
      - git push origin HEAD:main

    when:
      branch: [main]
      event: [push, manual]

  apply_secrets:
    name: Apply Secrets to K8s
    image: bitnami/kubectl:1.30
    environment:
      DOCKER_SERVER: https://index.docker.io/v1/
      KUBE_NAMESPACE: ${KUBE_NAMESPACE=local-services}
      APP_NAME: ${APP_NAME=${CI_REPO_NAME}}
      KUBE_CONFIG:
        from_secret: KUBE_CONFIG
      DOCKER_USER:
        from_secret: DOCKER_USER
      DOCKER_TOKEN:
        from_secret: DOCKER_TOKEN
    commands:
      - set -eu
      - mkdir -p $HOME/.kube && echo "$KUBE_CONFIG" > $HOME/.kube/config && chmod 600 $HOME/.kube/config
      - kubectl -n ${KUBE_NAMESPACE} create secret docker-registry registry-cred \
        --docker-server="${DOCKER_SERVER}" \
        --docker-username="${DOCKER_USER}" \
        --docker-password="${DOCKER_TOKEN}" \
        --dry-run=client -o yaml | kubectl apply -f -
      - |
        NAME=${APP_NAME}
        NS=${KUBE_NAMESPACE}
        TMP=/tmp/secret.yaml
        {
          echo "apiVersion: v1"
          echo "kind: Secret"
          echo "metadata:"
          echo "  name: ${NAME}-secrets"
          echo "  namespace: ${NS}"
          echo "type: Opaque"
          echo "stringData:"
          echo "  dotenv: |"
          env | awk -F= '/^ENV__/ {
            key=substr($1,6); val=$0; sub(/^[^=]*=/,"",val);
            printf "    %s=%s\n", key, val
          }'
          env | awk -F= '/^ENV__/ {
            key=substr($1,6); val=$0; sub(/^[^=]*=/,"",val);
            gsub(/\\/,"\\\\",val); gsub(/"/,"\\\"",val);
            printf "  \"%s\": \"%s\"\n", key, val
          }'
        } > $TMP
        kubectl apply -f $TMP
    when:
      branch: [main]
      event: [push, manual]
