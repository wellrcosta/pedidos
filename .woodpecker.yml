variables:
  REGISTRY: ghcr.io

steps:
  sanity_env:
    name: Sanity envs presentes
    image: alpine:3.20
    secrets: [REGISTRY_USER, REGISTRY_TOKEN]
    commands:
      - echo "Checando variáveis esperadas..."
      - test -n "${REGISTRY:-}" && echo "REGISTRY=OK (${REGISTRY})" || (echo "REGISTRY=VAZIO"; exit 1)
      - test -n "${REGISTRY_USER:-}" && echo "REGISTRY_USER=OK" || (echo "REGISTRY_USER=VAZIO"; exit 1)
      - test -n "${REGISTRY_TOKEN:-}" && echo "REGISTRY_TOKEN=OK" || (echo "REGISTRY_TOKEN=VAZIO"; exit 1)

  install_and_test:
    name: Install & Test
    image: node:20
    commands:
      - npm ci
      - npm run test -- --coverage
    when:
      branch: [main]
      event: [push, manual]
    depends_on: [sanity_env]

  upload_coverage_codecov:
    name: Upload Coverage to Codecov
    image: alpine:latest
    environment:
      CODECOV_TOKEN:
        from_secret: CODECOV_TOKEN
    commands:
      - apk add --no-cache curl bash
      - curl -Os https://uploader.codecov.io/latest/linux/codecov
      - chmod +x codecov
      - ./codecov --token "$CODECOV_TOKEN" --fail-under=60 --file=coverage/lcov.info
    when:
      branch: [main]
      event: [push, manual]
    depends_on: [install_and_test]

  docker_build_push:
    name: Docker Build & Push (GHCR)
    image: docker:27.1-cli
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    secrets: [REGISTRY_USER, REGISTRY_TOKEN]
    environment:
      REGISTRY: ${REGISTRY}
    commands:
      - set -eu
      - : "${REGISTRY:?REGISTRY ausente}"
      - : "${REGISTRY_USER:?REGISTRY_USER ausente (defina secret no Woodpecker)}"
      - : "${REGISTRY_TOKEN:?REGISTRY_TOKEN ausente (defina secret no Woodpecker)}"
      - echo "Fazendo login em ${REGISTRY} como ${REGISTRY_USER}"
      - echo "${REGISTRY_TOKEN}" | docker login "${REGISTRY}" -u "${REGISTRY_USER}" --password-stdin
      - IMAGE_REPO_NAME=$(echo "${CI_REPO_NAME}" | tr '[:upper:]' '[:lower:]')
      - IMAGE_REPO=${REGISTRY}/wellrcosta/${IMAGE_REPO_NAME}
      - SHA=${CI_COMMIT_SHA}
      - docker build -t "${IMAGE_REPO}:${SHA}" -t "${IMAGE_REPO}:latest" .
      - docker push "${IMAGE_REPO}:${SHA}"
      - docker push "${IMAGE_REPO}:latest"
      - echo "${SHA}" > .tag_sha
    when:
      branch: [main]
      event: [push, manual]
    depends_on: [install_and_test]

  bump_tag_commit:
    name: Bump tag in deploy.values.yaml
    image: alpine:3.20
    environment:
      GITHUB_TOKEN:
        from_secret: GITHUB_TOKEN
    commands:
      - apk add --no-cache git yq
      - git config --global user.email "ci@wellrcosta.dev"
      - git config --global user.name  "woodpecker-bot"
      - git remote set-url origin "https://wellrcosta:${GITHUB_TOKEN}@github.com/wellrcosta/${CI_REPO_NAME}.git"
      - SHA=$(cat .tag_sha)
      - |
        if [ -f deploy.values.yaml ]; then
          yq -i ".tag = \"${SHA}\"" deploy.values.yaml
          git add deploy.values.yaml
          git commit -m "chore(ci): update image tag to ${SHA}" || true
          git push origin HEAD:main
        else
          echo "deploy.values.yaml não encontrado na raiz."
          exit 1
        fi
    when:
      branch: [main]
      event: [push, manual]
    depends_on: [docker_build_push]

  apply_secrets:
    name: Apply Secrets to K8s
    image: bitnami/kubectl:1.30
    secrets: [REGISTRY_USER, REGISTRY_TOKEN, KUBE_CONFIG]
    environment:
      REGISTRY: ${REGISTRY}
      KUBE_NAMESPACE: ${KUBE_NAMESPACE=local-services}
      APP_NAME: ${APP_NAME=${CI_REPO_NAME}}
    commands:
      - mkdir -p $HOME/.kube && echo "$KUBE_CONFIG" > $HOME/.kube/config && chmod 600 $HOME/.kube/config
      - kubectl -n ${KUBE_NAMESPACE} create secret docker-registry registry-cred \
        --docker-server=${REGISTRY} --docker-username="${REGISTRY_USER}" --docker-password="${REGISTRY_TOKEN}" \
        --dry-run=client -o yaml | kubectl apply -f -
      - |
        NAME=${APP_NAME}
        NS=${KUBE_NAMESPACE}
        TMP=/tmp/secret.yaml
        {
          echo "apiVersion: v1"
          echo "kind: Secret"
          echo "metadata:"
          echo "  name: ${NAME}-secrets"
          echo "  namespace: ${NS}"
          echo "type: Opaque"
          echo "stringData:"
          echo "  dotenv: |"
          env | awk -F= '/^ENV__/ {
            key=substr($1,6); val=$0; sub(/^[^=]*=/,"",val);
            printf "    %s=%s\n", key, val
          }'
          env | awk -F= '/^ENV__/ {
            key=substr($1,6); val=$0; sub(/^[^=]*=/,"",val);
            gsub(/\\/,"\\\\",val); gsub(/"/,"\\\"",val);
            printf "  \"%s\": \"%s\"\n", key, val
          }'
        } > $TMP
        kubectl apply -f $TMP
    when:
      branch: [main]
      event: [push, manual]
    depends_on: [bump_tag_commit]
