# .woodpecker.yml — Docker Hub + tag por SHA + bump automático

steps:
  install_and_test:
    name: Install & Test
    image: node:20
    commands:
      - npm ci
      - npm run test -- --coverage
    when:
      branch: [main]
      event: [push, manual]

  upload_coverage_codecov:
    name: Upload Coverage to Codecov
    image: alpine:latest
    environment:
      CODECOV_TOKEN:
        from_secret: CODECOV_TOKEN
    commands:
      - apk add --no-cache curl bash
      - curl -Os https://uploader.codecov.io/latest/linux/codecov
      - chmod +x codecov
      - ./codecov --token "$CODECOV_TOKEN" --fail-under=60 --file=coverage/lcov.info
    when:
      branch: [main]
      event: [push, manual]

  docker_build_push:
    name: Docker Build & Push (Docker Hub)
    image: docker:24.0.7-cli
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      DOCKER_USER:
        from_secret: DOCKER_USER
      DOCKER_TOKEN:
        from_secret: DOCKER_TOKEN
    commands:
      - set -eu
      - echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USER" --password-stdin
      - docker build -t "wellrcosta/${CI_REPO_NAME}:latest" -t "wellrcosta/${CI_REPO_NAME}:${CI_COMMIT_SHA}" .
      - docker push "wellrcosta/${CI_REPO_NAME}:latest"
      - docker push "wellrcosta/${CI_REPO_NAME}:${CI_COMMIT_SHA}"
      # opcional manter .tag_sha, mas o bump não dependerá mais dele
      - echo "${CI_COMMIT_SHA}" > .tag_sha || true
      - docker rmi "wellrcosta/${CI_REPO_NAME}:latest" || true
      - docker rmi "wellrcosta/${CI_REPO_NAME}:${CI_COMMIT_SHA}" || true
    when:
      branch: [main]
      event: [push, manual]

  bump_tag_commit:
    name: Bump tag in deploy.values.yaml
    image: alpine:3.20
    environment:
      GITHUB_TOKEN:
        from_secret: GITHUB_TOKEN # PAT com escopo "repo"
    commands:
      - set -eu
      - apk add --no-cache git yq
      - git config --global user.email "ci@wellrcosta.dev"
      - git config --global user.name  "woodpecker-bot"
      # garante que o workspace é seguro
      - git config --global --add safe.directory /woodpecker/src || true
      # descobre owner/repo de forma robusta
      - REPO_FULL="${CI_REPO:-wellrcosta/${CI_REPO_NAME}}"
      - : "${REPO_FULL:?CI_REPO e CI_REPO_NAME não disponíveis}"
      # usa CI_COMMIT_SHA diretamente (sem depender de .tag_sha)
      - SHA="${CI_COMMIT_SHA:-}"
      - |
        if [ -z "$SHA" ]; then
          SHA="$(git rev-parse HEAD)"
        fi
      # atualiza a tag no values
      - |
        if [ -f deploy.values.yaml ]; then
          yq -i ".tag = \"${SHA}\"" deploy.values.yaml
          git add deploy.values.yaml
          git commit -m "chore(ci): update image tag to ${SHA}" || true
        else
          echo "deploy.values.yaml não encontrado na raiz."
          exit 1
        fi
      # push usando header de autorização (evita problemas na URL)
      - git -c "http.extraheader=AUTHORIZATION: bearer ${GITHUB_TOKEN}" push https://github.com/${REPO_FULL}.git HEAD:main
    when:
      branch: [main]
      event: [push, manual]

  apply_secrets:
    name: Apply Secrets to K8s
    image: bitnami/kubectl:1.30
    environment:
      DOCKER_SERVER: https://index.docker.io/v1/
      KUBE_NAMESPACE: ${KUBE_NAMESPACE=local-services}
      APP_NAME: ${APP_NAME=${CI_REPO_NAME}}
      KUBE_CONFIG:
        from_secret: KUBE_CONFIG
      DOCKER_USER:
        from_secret: DOCKER_USER
      DOCKER_TOKEN:
        from_secret: DOCKER_TOKEN
    commands:
      - set -eu
      - mkdir -p $HOME/.kube && echo "$KUBE_CONFIG" > $HOME/.kube/config && chmod 600 $HOME/.kube/config
      - kubectl -n ${KUBE_NAMESPACE} create secret docker-registry registry-cred \
        --docker-server="${DOCKER_SERVER}" \
        --docker-username="${DOCKER_USER}" \
        --docker-password="${DOCKER_TOKEN}" \
        --dry-run=client -o yaml | kubectl apply -f -
      - |
        NAME=${APP_NAME}
        NS=${KUBE_NAMESPACE}
        TMP=/tmp/secret.yaml
        {
          echo "apiVersion: v1"
          echo "kind: Secret"
          echo "metadata:"
          echo "  name: ${NAME}-secrets"
          echo "  namespace: ${NS}"
          echo "type: Opaque"
          echo "stringData:"
          echo "  dotenv: |"
          env | awk -F= '/^ENV__/ {
            key=substr($1,6); val=$0; sub(/^[^=]*=/,"",val);
            printf "    %s=%s\n", key, val
          }'
          env | awk -F= '/^ENV__/ {
            key=substr($1,6); val=$0; sub(/^[^=]*=/,"",val);
            gsub(/\\/,"\\\\",val); gsub(/"/,"\\\"",val);
            printf "  \"%s\": \"%s\"\n", key, val
          }'
        } > $TMP
        kubectl apply -f $TMP
    when:
      branch: [main]
      event: [push, manual]
