# .woodpecker.yml — Docker Hub + SHA + bump automático (com guard-clauses)

steps:
  install_and_test:
    name: Install & Test
    image: node:20
    commands:
      - npm ci
      - npm run test -- --coverage
    when:
      branch: [main]
      event: [push, manual]

  upload_coverage_codecov:
    name: Upload Coverage to Codecov
    image: alpine:latest
    environment:
      CODECOV_TOKEN:
        from_secret: CODECOV_TOKEN
    commands:
      - apk add --no-cache curl bash
      - curl -Os https://uploader.codecov.io/latest/linux/codecov
      - chmod +x codecov
      - ./codecov --token "$CODECOV_TOKEN" --fail-under=60 --file=coverage/lcov.info
    when:
      branch: [main]
      event: [push, manual]

  docker_build_push:
    name: Docker Build & Push (Docker Hub)
    image: docker:24.0.7-cli
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      DOCKER_USER:
        from_secret: DOCKER_USER
      DOCKER_TOKEN:
        from_secret: DOCKER_TOKEN
    commands:
      - set -eu
      - echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USER" --password-stdin
      - docker build -t "wellrcosta/${CI_REPO_NAME}:latest" -t "wellrcosta/${CI_REPO_NAME}:${CI_COMMIT_SHA}" .
      - docker push "wellrcosta/${CI_REPO_NAME}:latest"
      - docker push "wellrcosta/${CI_REPO_NAME}:${CI_COMMIT_SHA}"
      - echo "${CI_COMMIT_SHA}" > .tag_sha
      - docker rmi "wellrcosta/${CI_REPO_NAME}:latest" || true
      - docker rmi "wellrcosta/${CI_REPO_NAME}:${CI_COMMIT_SHA}" || true
    when:
      branch: [main]
      event: [push, manual]

  bump_tag_commit:
    name: Bump tag in deploy.values.yaml
    image: alpine:3.20
    environment:
      GITHUB_TOKEN:
        from_secret: GITHUB_TOKEN # PAT com escopo "repo"
    commands:
      - set -eu
      - apk add --no-cache git yq

      # Configurar git
      - git config --global user.email "ci@wellrcosta.dev"
      - git config --global user.name "woodpecker-bot"
      - git config --global --add safe.directory /woodpecker/src

      # Verificar se deploy.values.yaml existe
      - |
        if [ ! -f deploy.values.yaml ]; then
          echo "ERRO: deploy.values.yaml não encontrado na raiz do repositório" >&2
          ls -la . # mostrar conteúdo para debug
          exit 1
        fi

      # Atualizar arquivo usando CI_COMMIT_SHA diretamente (preservando formatação)
      - |
        echo "Atualizando tag para: ${CI_COMMIT_SHA}"
        # Usar yq com --prettyPrint para preservar formatação
        yq -i --prettyPrint ".tag = \"${CI_COMMIT_SHA}\"" deploy.values.yaml

        # Verificar se houve mudanças
        if git diff --quiet deploy.values.yaml; then
          echo "Nenhuma mudança detectada no deploy.values.yaml"
          exit 0
        fi

        echo "=== MUDANÇAS DETECTADAS ==="
        git diff deploy.values.yaml
        echo "=========================="

        git add deploy.values.yaml
        git commit -m "chore(ci): update image tag to ${CI_COMMIT_SHA}"

      # Push para o repositório (com debug de permissões)
      - |
        echo "Configurando remote com token..."
        echo "Repositório: $CI_REPO_OWNER/$CI_REPO_NAME"

        # Testar diferentes formatos de autenticação
        echo "=== TENTATIVA 1: x-access-token ==="
        git remote set-url origin "https://x-access-token:$GITHUB_TOKEN@github.com/$CI_REPO_OWNER/$CI_REPO_NAME.git"
        git push origin HEAD:main || {
          echo "ERRO: x-access-token falhou"
          
          echo "=== TENTATIVA 2: username direto ==="
          git remote set-url origin "https://$CI_REPO_OWNER:$GITHUB_TOKEN@github.com/$CI_REPO_OWNER/$CI_REPO_NAME.git"
          git push origin HEAD:main || {
            echo "ERRO: username direto falhou"
            
            echo "=== TENTATIVA 3: token como username ==="
            git remote set-url origin "https://$GITHUB_TOKEN@github.com/$CI_REPO_OWNER/$CI_REPO_NAME.git"
            git push origin HEAD:main || {
              echo "ERRO: Todas as tentativas de autenticação falharam"
              echo "Verifique se o token tem permissão de WRITE no repositório $CI_REPO_OWNER/$CI_REPO_NAME"
              exit 1
            }
          }
        }

    when:
      branch: [main]
      event: [push, manual]

  apply_secrets:
    name: Apply Secrets to K8s
    image: bitnami/kubectl:1.30
    environment:
      DOCKER_SERVER: https://index.docker.io/v1/ # default literal ok aqui
      KUBE_NAMESPACE: local-services # default literal ok aqui
      # secrets:
      KUBE_CONFIG:
        from_secret: KUBE_CONFIG
      DOCKER_USER:
        from_secret: DOCKER_USER
      DOCKER_TOKEN:
        from_secret: DOCKER_TOKEN
    commands:
      - |
        set -eu

        # defaults / fallbacks (faça os defaults via shell, não no environment:)
        export KUBE_NAMESPACE="${KUBE_NAMESPACE:-local-services}"
        export DOCKER_SERVER="${DOCKER_SERVER:-https://index.docker.io/v1/}"
        export APP_NAME="${APP_NAME:-${CI_REPO_NAME}}"

        echo "=== DEBUG ==="
        echo "KUBE_NAMESPACE=$KUBE_NAMESPACE"
        echo "APP_NAME=$APP_NAME"
        echo "DOCKER_SERVER=$DOCKER_SERVER"
        echo "DOCKER_USER set? $([ -n "${DOCKER_USER:-}" ] && echo yes || echo no)"
        echo "DOCKER_TOKEN set? $([ -n "${DOCKER_TOKEN:-}" ] && echo yes || echo no)"
        echo "============="

        # guards
        if [ -z "$KUBE_CONFIG:-" ]; then
          echo "KUBE_CONFIG ausente (defina no Woodpecker Secrets)" >&2; exit 1
        fi
        if [ -z "$DOCKER_USER:-" ] || [ -z "$DOCKER_TOKEN:-" ]; then
          echo "DOCKER_USER/DOCKER_TOKEN ausentes (defina no Woodpecker Secrets)" >&2; exit 1
        fi

        # kubeconfig
        mkdir -p "$HOME/.kube"
        echo "$KUBE_CONFIG" > "$HOME/.kube/config"
        chmod 600 "$HOME/.kube/config"

        # imagePullSecret (Docker Hub)
        kubectl -n "${KUBE_NAMESPACE}" create secret docker-registry registry-cred \
          --docker-server="$DOCKER_SERVER" \
          --docker-username="$DOCKER_USER" \
          --docker-password="$DOCKER_TOKEN" \
          --dry-run=client -o yaml | kubectl apply -f -

        # Secret com .env + espelho em env vars
        TMP=/tmp/secret.yaml
        {
          echo "apiVersion: v1"
          echo "kind: Secret"
          echo "metadata:"
          echo "  name: ${APP_NAME}-secrets"
          echo "  namespace: ${KUBE_NAMESPACE}"
          echo "type: Opaque"
          echo "stringData:"
          echo "  dotenv: |"
          env | awk -F= '/^ENV__/ {
            key=substr($1,6); val=$0; sub(/^[^=]*=/,"",val);
            printf "    %s=%s\n", key, val
          }'
          env | awk -F= '/^ENV__/ {
            key=substr($1,6); val=$0; sub(/^[^=]*=/,"",val);
            gsub(/\\/,"\\\\",val); gsub(/"/,"\\\"",val);
            printf "  \"%s\": \"%s\"\n", key, val
          }'
        } > "$TMP"
        kubectl apply -f "$TMP"
    when:
      branch: [main]
      event: [push, manual]
